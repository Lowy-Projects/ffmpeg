Checking whether the ASM_YASM compiler is GNU using "--version" did not match "(GNU assembler)|(GCC)|(Free Software Foundation)":
yasm 1.3.0
Compiled on Dec  5 2014.
Copyright (c) 2001-2014 Peter Johnson and other Yasm developers.
Run yasm --license for licensing overview and summary.
Checking whether the ASM_YASM compiler is HP using "-V" did not match "HP C":
yasm: warning: unrecognized option `-V'
yasm: No input files specified
Checking whether the ASM_YASM compiler is Intel using "--version" did not match "(ICC)":
yasm 1.3.0
Compiled on Dec  5 2014.
Copyright (c) 2001-2014 Peter Johnson and other Yasm developers.
Run yasm --license for licensing overview and summary.
Checking whether the ASM_YASM compiler is SunPro using "-V" did not match "Sun C":
yasm: warning: unrecognized option `-V'
yasm: No input files specified
Checking whether the ASM_YASM compiler is XL using "-qversion" did not match "XL C":
yasm: warning: unrecognized option `-qversion'
yasm: No input files specified
Checking whether the ASM_YASM compiler is MSVC using "/?" did not match "Microsoft":
yasm: file name already has no extension: output will be in `yasm.out'
yasm: FATAL: Could not open input file
Checking whether the ASM_YASM compiler is TI using "-h" did not match "Texas Instruments":
usage: yasm [option]* file
Options:
    --version               show version text
    --license               show license text
    -h, --help              show help text
    --arch=<arch>           select architecture (list with -a help)
     -a <arch>
    --parser=<parser>       select parser (list with -p help)
     -p <parser>
    --preproc=<preproc>     select preprocessor (list with -r help)
     -r <preproc>
    --oformat=<format>      select object format (list with -f help)
     -f <format>
    --dformat=<debug>       select debugging format (list with -g help)
     -g <debug>
    --lformat=<list>        select list format (list with -L help)
     -L <list>
    --list=<listfile>       name of list-file output
     -l <listfile>
    --objfile=<filename>    name of object-file output
     -o <filename>
    --mapfile=<filename>    name of map-file output
    --machine=<machine>     select machine (list with -m help)
     -m <machine>
    --force-strict          treat all sized operands as if `strict' was used
    -w                      inhibits warning messages
    -W                      enables/disables warning
    -M                      generate Makefile dependencies on stdout
    -E <file>               redirect error messages to file
    -s                      redirect error messages to stdout
    -e, --preproc-only      preprocess only (writes output to stdout by default)
    -i <path>               add include path
    -I <path>               add include path
    -P <filename>           pre-include file
    -d <macro[=value]>      pre-define a macro, optionally to value
    -D <macro[=value]>      pre-define a macro, optionally to value
    -u <macro>              undefine a macro
    -U <macro>              undefine a macro
    -X <style>              select error/warning message style (`gnu' or `vc')
    --prefix=<prefix>       prepend argument to name of all external symbols
    --suffix=<suffix>       append argument to name of all external symbols
    --postfix=<suffix>      append argument to name of all external symbols

Files are asm sources to be assembled.

Sample invocation:
   yasm -f elf -o object.o source.asm

Report bugs to bug-yasm@tortall.net
Checking whether the ASM_YASM compiler is GNU using "--version" did not match "(GNU assembler)|(GCC)|(Free Software Foundation)":
yasm 1.3.0
Compiled on Dec  5 2014.
Copyright (c) 2001-2014 Peter Johnson and other Yasm developers.
Run yasm --license for licensing overview and summary.
Checking whether the ASM_YASM compiler is IAR using "" did not match "IAR Assembler":
yasm: No input files specified
Determining if the __rdtsc exist failed with the following output:
Change Dir: /home/lowy/src/x265/build/linux/CMakeFiles/CMakeTmp

Run Build Command:/usr/bin/make "cmTryCompileExec2441604354/fast"
/usr/bin/make -f CMakeFiles/cmTryCompileExec2441604354.dir/build.make CMakeFiles/cmTryCompileExec2441604354.dir/build
make[1]: Entering directory '/home/lowy/src/x265/build/linux/CMakeFiles/CMakeTmp'
/usr/bin/cmake -E cmake_progress_report /home/lowy/src/x265/build/linux/CMakeFiles/CMakeTmp/CMakeFiles 1
Building C object CMakeFiles/cmTryCompileExec2441604354.dir/CheckSymbolExists.c.o
/usr/bin/cc    -o CMakeFiles/cmTryCompileExec2441604354.dir/CheckSymbolExists.c.o   -c /home/lowy/src/x265/build/linux/CMakeFiles/CMakeTmp/CheckSymbolExists.c
/home/lowy/src/x265/build/linux/CMakeFiles/CMakeTmp/CheckSymbolExists.c:2:20: fatal error: intrin.h: Nincs ilyen fájl vagy könyvtár
 #include <intrin.h>
                    ^
compilation terminated.
CMakeFiles/cmTryCompileExec2441604354.dir/build.make:60: recipe for target 'CMakeFiles/cmTryCompileExec2441604354.dir/CheckSymbolExists.c.o' failed
make[1]: Leaving directory '/home/lowy/src/x265/build/linux/CMakeFiles/CMakeTmp'
make[1]: *** [CMakeFiles/cmTryCompileExec2441604354.dir/CheckSymbolExists.c.o] Error 1
Makefile:117: recipe for target 'cmTryCompileExec2441604354/fast' failed
make: *** [cmTryCompileExec2441604354/fast] Error 2

File /home/lowy/src/x265/build/linux/CMakeFiles/CMakeTmp/CheckSymbolExists.c:
/* */
#include <intrin.h>

int main(int argc, char** argv)
{
  (void)argv;
#ifndef __rdtsc
  return ((int*)(&__rdtsc))[argc];
#else
  (void)argc;
  return 0;
#endif
}

Checking whether the ASM_YASM compiler is GNU using "--version" did not match "(GNU assembler)|(GCC)|(Free Software Foundation)":
yasm 1.3.0
Compiled on Dec  5 2014.
Copyright (c) 2001-2014 Peter Johnson and other Yasm developers.
Run yasm --license for licensing overview and summary.
Checking whether the ASM_YASM compiler is HP using "-V" did not match "HP C":
yasm: warning: unrecognized option `-V'
yasm: No input files specified
Checking whether the ASM_YASM compiler is Intel using "--version" did not match "(ICC)":
yasm 1.3.0
Compiled on Dec  5 2014.
Copyright (c) 2001-2014 Peter Johnson and other Yasm developers.
Run yasm --license for licensing overview and summary.
Checking whether the ASM_YASM compiler is SunPro using "-V" did not match "Sun C":
yasm: warning: unrecognized option `-V'
yasm: No input files specified
Checking whether the ASM_YASM compiler is XL using "-qversion" did not match "XL C":
yasm: warning: unrecognized option `-qversion'
yasm: No input files specified
Checking whether the ASM_YASM compiler is MSVC using "/?" did not match "Microsoft":
yasm: file name already has no extension: output will be in `yasm.out'
yasm: FATAL: Could not open input file
Checking whether the ASM_YASM compiler is TI using "-h" did not match "Texas Instruments":
usage: yasm [option]* file
Options:
    --version               show version text
    --license               show license text
    -h, --help              show help text
    --arch=<arch>           select architecture (list with -a help)
     -a <arch>
    --parser=<parser>       select parser (list with -p help)
     -p <parser>
    --preproc=<preproc>     select preprocessor (list with -r help)
     -r <preproc>
    --oformat=<format>      select object format (list with -f help)
     -f <format>
    --dformat=<debug>       select debugging format (list with -g help)
     -g <debug>
    --lformat=<list>        select list format (list with -L help)
     -L <list>
    --list=<listfile>       name of list-file output
     -l <listfile>
    --objfile=<filename>    name of object-file output
     -o <filename>
    --mapfile=<filename>    name of map-file output
    --machine=<machine>     select machine (list with -m help)
     -m <machine>
    --force-strict          treat all sized operands as if `strict' was used
    -w                      inhibits warning messages
    -W                      enables/disables warning
    -M                      generate Makefile dependencies on stdout
    -E <file>               redirect error messages to file
    -s                      redirect error messages to stdout
    -e, --preproc-only      preprocess only (writes output to stdout by default)
    -i <path>               add include path
    -I <path>               add include path
    -P <filename>           pre-include file
    -d <macro[=value]>      pre-define a macro, optionally to value
    -D <macro[=value]>      pre-define a macro, optionally to value
    -u <macro>              undefine a macro
    -U <macro>              undefine a macro
    -X <style>              select error/warning message style (`gnu' or `vc')
    --prefix=<prefix>       prepend argument to name of all external symbols
    --suffix=<suffix>       append argument to name of all external symbols
    --postfix=<suffix>      append argument to name of all external symbols

Files are asm sources to be assembled.

Sample invocation:
   yasm -f elf -o object.o source.asm

Report bugs to bug-yasm@tortall.net
Checking whether the ASM_YASM compiler is GNU using "--version" did not match "(GNU assembler)|(GCC)|(Free Software Foundation)":
yasm 1.3.0
Compiled on Dec  5 2014.
Copyright (c) 2001-2014 Peter Johnson and other Yasm developers.
Run yasm --license for licensing overview and summary.
Checking whether the ASM_YASM compiler is IAR using "" did not match "IAR Assembler":
yasm: No input files specified
Performing C++ SOURCE FILE Test CC_HAS_NO_STRICT_OVERFLOW failed with the following output:

Source file was:
int main() { return 0;}
Performing C++ SOURCE FILE Test CC_HAS_NO_NARROWING failed with the following output:

Source file was:
int main() { return 0;}
Performing C++ SOURCE FILE Test CC_HAS_NO_ARRAY_BOUNDS failed with the following output:

Source file was:
int main() { return 0;}
Performing C++ SOURCE FILE Test CC_HAS_FAST_MATH failed with the following output:

Source file was:
int main() { return 0;}
Performing C++ SOURCE FILE Test CC_HAS_STACK_REALIGN failed with the following output:

Source file was:
int main() { return 0;}
Performing C++ SOURCE FILE Test CC_HAS_FNO_EXCEPTIONS_FLAG failed with the following output:

Source file was:
int main() { return 0;}
